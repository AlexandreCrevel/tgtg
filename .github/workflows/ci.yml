name: CI

on:
  push:
    branches:
      - main
      - dev
      - test
    tags:
      - v*
  pull_request:
  schedule:
    - cron: "0 1 * * *"

jobs:
    code-ql:
        name: CodeQL
        runs-on: ubuntu-latest
        permissions:
            actions: read
            contents: read
            security-events: write
        strategy:
            fail-fast: false
        steps:
            -   uses: actions/checkout@v3
            -   uses: github/codeql-action/init@v2
                with:
                    languages: 'python'
            -   uses: github/codeql-action/analyze@v2
    update-tokens:
        name: Update Tokens
        runs-on: ubuntu-latest
        steps:
            -   uses: actions/checkout@v3
            -   uses: actions/setup-python@v4
                with:
                    python-version: 3.9
            -   name: Install dependencies
                run: pip install -r requirements.txt
            -   name: Login
                run: |
                    python ./src/login.py
                    echo "::add-mask::${{ env.TGTG_ACCESS_TOKEN }}"
                    echo "::add-mask::${{ env.TGTG_REFRESH_TOKEN }}"
                    echo "::add-mask::${{ env.TGTG_USER_ID }}"
                    echo "TGTG_ACCESS_TOKEN=${{ env.TGTG_ACCESS_TOKEN }}" >> $GITHUB_ENV
                    echo "TGTG_REFRESH_TOKEN=${{ env.TGTG_REFRESH_TOKEN }}" >> $GITHUB_ENV
                    echo "TGTG_USER_ID=${{ env.TGTG_USER_ID }}" >> $GITHUB_ENV
                    echo "${{ env.TGTG_TEST }}"
                env:
                    TGTG_USERNAME: ${{ secrets.TGTG_USERNAME }}
                    TGTG_ACCESS_TOKEN: ${{ secrets.TGTG_ACCESS_TOKEN }}
                    TGTG_REFRESH_TOKEN: ${{ secrets.TGTG_REFRESH_TOKEN }}
                    TGTG_USER_ID: ${{ secrets.TGTG_USER_ID }}
            -   uses: hmanzur/actions-set-secret@v2.0.0
                with:
                    name: 'TGTG_ACCESS_TOKEN'
                    value: ${{ env.TGTG_ACCESS_TOKEN }}
                    repository: Der-Henning/tgtg
                    token: ${{ secrets.REPO_ACCESS_TOKEN }}
            -   uses: hmanzur/actions-set-secret@v2.0.0
                with:
                    name: 'TGTG_REFRESH_TOKEN'
                    value: ${{ env.TGTG_REFRESH_TOKEN }}
                    repository: Der-Henning/tgtg
                    token: ${{ secrets.REPO_ACCESS_TOKEN }}
            -   uses: hmanzur/actions-set-secret@v2.0.0
                with:
                    name: 'TGTG_USER_ID'
                    value: ${{ env.TGTG_USER_ID }}
                    repository: Der-Henning/tgtg
                    token: ${{ secrets.REPO_ACCESS_TOKEN }}
    tests:
        name: Run Tests
        runs-on: ${{ matrix.os }}
        needs: update-tokens
        strategy:
            matrix:
                python: ['3.9']
                os: [ubuntu-latest, windows-latest, macos-latest]
        steps:
            -   uses: actions/checkout@v3
            -   uses: actions/setup-python@v4
                with:
                    python-version: ${{ matrix.python }}
            -   name: Install dependencies
                run: pip install -r requirements.txt
            -   name: Run tests
                run: python -m unittest discover -v -s ./src
                env:
                    TGTG_USERNAME: ${{ secrets.TGTG_USERNAME }}
                    TGTG_ACCESS_TOKEN: ${{ secrets.TGTG_ACCESS_TOKEN }}
                    TGTG_REFRESH_TOKEN: ${{ secrets.TGTG_REFRESH_TOKEN }}
                    TGTG_USER_ID: ${{ secrets.TGTG_USER_ID }}
    # release-tag:
    #     name: Generate Release Tag
    #     runs-on: ubuntu-latest
    #     # needs: tests
    #     if: ${{ github.event_name == 'push' }}
    #     outputs:
    #         tag: ${{ steps.tag.outputs.tag }}
    #     steps:
    #         -   name: Generate Release Tag
    #             id: tag
    #             run: |
    #                 if [ "${{ github.ref_name }}" = "main" ]; \
    #                 then echo "::set-output name=tag::latest"; \
    #                 elif [ "${{ github.ref_name }}" = "dev" ]; \
    #                 then echo "::set-output name=tag::dev"; \
    #                 else echo "::set-output name=tag::${{ github.ref_name }}"; fi
    docker-images:
        name: Build Docker Images
        runs-on: ubuntu-latest
        # needs: release-tag
        steps:
        -   uses: actions/checkout@v3
        -   uses: docker/metadata-action@v4
            id: meta
            with:
                images: ${{ secrets.DOCKER_USERNAME }}/tgtg
                tags: |
                    type=edge,event=branch
                    type=semver,pattern={{version}}
                    type=semver,pattern={{major}}.{{minor}}
        -   name: Dockerhub login
            uses: docker/login-action@v2
            with:
                username: ${{ secrets.DOCKER_USERNAME }}
                password: ${{ secrets.DOCKER_PASSWORD }}
        -   name: Set up QEMU
            uses: docker/setup-qemu-action@v2
        -   name: Set up Docker Buildx
            id: buildx
            uses: docker/setup-buildx-action@v2
        -   name: Available platforms
            run: echo ${{ steps.buildx.outputs.platforms }}
        -   name: Build and push
            uses: docker/build-push-action@v3
            with:
                context: ./
                file: ./Dockerfile
                platforms: linux/arm64, linux/amd64, linux/arm/v7
                push: true
                tags: ${{ steps.meta.outputs.tags }}
                labels: ${{ steps.meta.outputs.labels }}
    releases:
        name: Build Release Files
        runs-on: ${{ matrix.os }}
        strategy:
            matrix:
                os: [ubuntu-latest, windows-latest, macos-latest]
                include:
                    -   os: ubuntu-latest
                        tag: linux
                    -   os: windows-latest
                        tag: win
                    -   os: macos-latest
                        tag: macos
        steps:
        -   uses: actions/checkout@v3
        -   uses: actions/setup-python@v4
            with:
                python-version: 3.9
        -   name: Install dependencies
            run: pip install -r requirements.dev.txt
        -   name: Build
            run: |
                pyinstaller scanner.spec
                cp ./src/config.sample.ini ./dist/config.ini
        -   uses: actions/upload-artifact@v3
            with: 
                name: scanner-${{ matrix.tag }}-${{ github.ref_name }}
                path: ./dist/*
