name: CI

on:
  push:
    branches:
      - main
      - dev
      - test
    tags:
      - v*
  pull_request:
  schedule:
    - cron: "0 1 * * *"

jobs:
    login:
        runs-on: ubuntu-latest
        steps:
            -   uses: actions/checkout@v3
            -   uses: actions/setup-python@v4
                with:
                    python-version: ${{ matrix.python }}
            -   name: Install dependencies
                run: pip install -r requirements.dev.txt
            -   name: Login
                run: python src/tests/login.py
                    echo "::add-mask::${{env.TGTG_ACCESS_TOKEN}}"
                    echo "::add-mask::${{env.TGTG_REFRESH_TOKEN}}"
                    echo "::add-mask::${{env.TGTG_USER_ID}}"
                    echo "TGTG_ACCESS_TOKEN=${{env.TGTG_ACCESS_TOKEN}}" >> $GITHUB_ENV
                    echo "TGTG_REFRESH_TOKEN=${{env.TGTG_REFRESH_TOKEN}}" >> $GITHUB_ENV
                    echo "TGTG_USER_ID=${{env.TGTG_USER_ID}}" >> $GITHUB_ENV
                env:
                    TGTG_USERNAME: ${{secrets.TGTG_USERNAME}}
                    TGTG_ACCESS_TOKEN: ${{secrets.TGTG_ACCESS_TOKEN}}
                    TGTG_REFRESH_TOKEN: ${{secrets.TGTG_REFRESH_TOKEN}}
                    TGTG_USER_ID: ${{secrets.TGTG_USER_ID}}
            -   uses: hmanzur/actions-set-secret@v2.0.0
                with:
                    name: 'TGTG_ACCESS_TOKEN'
                    value: ${{env.TGTG_ACCESS_TOKEN}}
                    repository: Der-Henning/tgtg
                    token: ${{ secrets.REPO_ACCESS_TOKEN }}
            -   uses: hmanzur/actions-set-secret@v2.0.0
                with:
                    name: 'TGTG_REFRESH_TOKEN'
                    value: ${{env.TGTG_REFRESH_TOKEN}}
                    repository: Der-Henning/tgtg
                    token: ${{ secrets.REPO_ACCESS_TOKEN }}
            -   uses: hmanzur/actions-set-secret@v2.0.0
                with:
                    name: 'TGTG_USER_ID'
                    value: ${{env.TGTG_USER_ID}}
                    repository: Der-Henning/tgtg
                    token: ${{ secrets.REPO_ACCESS_TOKEN }}
    tests:
        runs-on: ${{ matrix.os }}
        needs: login
        strategy:
            matrix:
                python: ['3.9', '3.10']
                os: [ubuntu-latest, windows-latest, macos-latest]
        steps:
            -   uses: actions/checkout@v3
            -   uses: actions/setup-python@v4
                with:
                    python-version: ${{ matrix.python }}
            -   name: Install dependencies
                run: pip install -r requirements.dev.txt
            -   name: Run tests
                run: |
                    python -m unittest discover -v -s ./src
                env:
                    TGTG_USERNAME: ${{secrets.TGTG_USERNAME}}
                    TGTG_ACCESS_TOKEN: ${{secrets.TGTG_ACCESS_TOKEN}}
                    TGTG_REFRESH_TOKEN: ${{secrets.TGTG_REFRESH_TOKEN}}
                    TGTG_USER_ID: ${{secrets.TGTG_USER_ID}}
    release-tag:
        runs-on: ubuntu-latest
        needs: tests
        if: ${{ github.event_name == 'push' }}
        outputs:
            tag: ${{ steps.tag.outputs.tag }}
        steps:
            -   id: tag
                run: |
                    if [ "${{ github.ref_name }}" = "main" ]; \
                    then echo "::set-output name=tag::latest"; \
                    elif [ "${{ github.ref_name }}" = "dev" ]; \
                    then echo "::set-output name=tag::dev"; \
                    else echo "::set-output name=tag::${{ github.ref_name }}"; fi
    docker:
        runs-on: ubuntu-latest
        needs: release-tag
        steps:
        -   uses: actions/checkout@v3
        -   name: Dockerhub login
            uses: docker/login-action@v2
            with:
                username: ${{ secrets.DOCKER_USERNAME }}
                password: ${{ secrets.DOCKER_PASSWORD }}
        -   name: Set up QEMU
            uses: docker/setup-qemu-action@v2
        -   name: Set up Docker Buildx
            id: buildx
            uses: docker/setup-buildx-action@v2
        -   name: Available platforms
            run: echo ${{ steps.buildx.outputs.platforms }}
        -   name: Build and push
            uses: docker/build-push-action@v3
            with:
                context: ./
                file: ./Dockerfile
                platforms: linux/arm64, linux/amd64, linux/arm/v7
                push: true
                tags: ${{ secrets.DOCKER_USERNAME }}/tgtg:${{ needs.release-tag.outputs.tag }}
    release:
        runs-on: ${{ matrix.os }}
        needs: release-tag
        strategy:
            matrix:
                os: [ubuntu-latest, windows-latest, macos-latest]
                include:
                    -   os: ubuntu-latest
                        tag: linux
                    -   os: windows-latest
                        tag: win
                    -   os: macos-latest
                        tag: macos
        steps:
        -   uses: actions/checkout@v3
        -   uses: actions/setup-python@v4
            with:
                python-version: 3.9
        -   name: Install dependencies
            run: pip install -r requirements.dev.txt
        -   name: Build
            run: |
                pyinstaller scanner.spec
                cp ./src/config.sample.ini ./dist/config.ini
        -   uses: actions/upload-artifact@v3
            with: 
                name: scanner-${{ matrix.tag }}-${{ needs.release-tag.outputs.tag }}
                path: ./dist/*
