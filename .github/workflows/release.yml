name: CI

on:
  push:
    branches:
      - main
    tags:
      - v*
jobs:
  docker-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - base: slim
            tag: ""
            file: ./Dockerfile
            context: ./
          - base: alpine
            tag: -alpine
            file: ./Dockerfile.alpine
            context: ./
    steps:
      - uses: actions/checkout@v3
      - uses: docker/metadata-action@v4
        id: meta
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}
          flavor: |
            suffix=${{ matrix.tag }},onlatest=true
          tags: |
            type=edge,branch=main,suffix=${{ matrix.tag }}
            type=semver,pattern=v{{version}}
            type=semver,pattern=v{{major}}.{{minor}}
            type=semver,pattern=v{{major}}
      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - uses: docker/setup-qemu-action@v2
      - uses: docker/setup-buildx-action@v2
        id: buildx
      - uses: docker/build-push-action@v3
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.file }}
          platforms: linux/arm64, linux/amd64, linux/arm/v7, linux/386, linux/arm/v6
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      - uses: peter-evans/dockerhub-description@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}
          short-description: ${{ github.event.repository.description }}
          readme-filepath: ./DOCKER_README.md
  releases:
    name: Build Release Files
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            tag: linux
          - os: windows-latest
            tag: win
          - os: macos-latest
            tag: macos
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Install dependencies
        run: pip install -r requirements-dev.txt
      - name: Run PyInstaller
        run: |
          pyinstaller scanner.spec
          cp ./src/config.sample.ini ./dist/config.ini
      - name: Make filename
        id: filename
        run: echo "::set-output name=filename::scanner-${{ github.ref_name }}-${{ matrix.tag }}.zip"
      - name: Zip files
        if: matrix.tag == 'linux' || matrix.tag == 'macos'
        run: zip -j ./${{ steps.filename.outputs.filename }} ./dist/*
      - name: Zip files
        if: matrix.tag == 'win'
        run: Compress-Archive ./dist/* ./${{ steps.filename.outputs.filename }}
      - uses: actions/upload-artifact@v3
        with:
          name: releases
          path: ./${{ steps.filename.outputs.filename }}
      - uses: bruceadams/get-release@v1.2.3
        if: github.ref_type == 'tag'
        id: get_release
        env:
          GITHUB_TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }}
      - uses: actions/upload-release-asset@v1
        if: github.ref_type == 'tag'
        env:
          GITHUB_TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: ./${{ steps.filename.outputs.filename }}
          asset_name: ${{ steps.filename.outputs.filename }}
          asset_content_type: application/zip
